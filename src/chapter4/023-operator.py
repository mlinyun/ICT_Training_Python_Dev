"""算术运算符"""
a = 21
b = 5
print(f'{a} + {b} = ', a + b)
print(f'{a} - {b} = ', a - b)
print(f'{a} * {b} = ', a * b)
print(f'{a} / {b} = ', a / b)
print(f'{a} // {b} = ', a // b)  # 整除，向下取整
print(f'{a} 除以 {b} 的余数是 ', a % b)  # 取模运算，返回 a 除以 b 的余数
print(f'{a} 的 {b} 次方是', a ** b)  # 幂运算

"""比较运算符"""
a = 6
b = 5
print(a == b)  # 比较对象是否相等
print(a != b)  # 比较两个对象是否不相等
print(a > b)  # 比较 a 是否大于 b
print(a < b)  # 比较 a 是否小于 b
print(a >= b)  # 比较 a 是否大于等于 b
print(a <= b)  # 比较 a 是否小于等于 b

"""赋值运算符"""
# 以最简单的 = 来说，赋值运算就是把右边的值赋给左边
a = 5
# 除了基本的赋值运算符之外，还有一些组合的赋值运算符
# 加法赋值，a += b 等价于 a = a + b
a = 4
b = 2
a += b
print(a)
# 减法赋值，a -= b 等价于 a = a - b
a = 4
b = 2
a -= b
print(a)
# 乘法赋值，a *= b 等价于 a = a * b
a = 4
b = 2
a *= b
print(a)
# 除法赋值，a /= b 等价于 a = a / b
a = 4
b = 2
a /= b
print(a)
# 整除赋值，a //= b 等价于 a = a // b
a = 4
b = 2
a //= b
print(a)
# 取模赋值，a %= b 等价于 a = a % b
a = 4
b = 2
a %= b
print(a)
# 幂赋值，a **= b 等价于 a = a ** b
a = 4
b = 2
a **= b
print(a)
# := 海象运算符可以在表达式内部为变量赋值，
# 这是 Python3.8 新增的一个运算符。在下面的示例中
# 赋值表达式可以避免调用 len() 两次
a = "abcdefg"
if (b := len(a)) > 3:
    print(f"字符串 {a} 的长度是 {b}")

"""逻辑运算符"""
# 逻辑运算符 与(and)、或(or)、非(not)
# 与运算（and），当左边的值为假则返回左边的值，否则返回右边的值
a = 10
b = 20
print(a and b)  # 返回 20
print(0 and b)  # 返回 0
# 或运算（or），当左边的值为真则返回左边，否则返回右边的值
print(a or b)  # 返回 10
print(0 or b)  # 返回 20
# 非运算（not），当值为真（True）则返回假（False），当值为假（False）则返回真（True）
a = 5
b = 0
print(not a)  # 返回 False
print(not b)  # 返回 True

"""位运算符"""
# 位运算是直接对整数的二进制形式进行操作
# 通过 bin() 函数查看对应数字的二进制形式，方便对比学习
b_5 = bin(5)
print(b_5)  # 0b101
b_9 = bin(9)
print(b_9)  # 0b1001

# 按位与（&）
# 两个数字的二进制形式对应数位都为 1，则该位的结果为 1，否则为 0
print(bin(5 & 9))  # 0b1
# 按位或（|）
# 两个数的二进制形式的对应数位，只要有一个为 1 ，则该位为 1
print(bin(5 | 9))  # 0b1101
# 按位异或（^）
# 按位异或是当两个数字的对应的二进制位不同时，结果为 1，否则为 0
print(bin(5 ^ 9))  # 0b1100
# 按位取反（~）
# 按位取反的值 ~x 相当于 -(x+1)
print(bin(~5))  # -0b110
# 左移运算符（<<）
# 左移运算符在运算时，通常是将所有二进制位左移若干位
# 由 << 右边的数指定移动的位数，高位丢弃，低位补0
# 由于 Python 3 中整数没有大小限制，所以不存在高位丢弃的现象
# 在 Python 左移 n 位等价于乘以 pow(2, n)，也就是乘以 2 的 n 次方
print(5 << 2)  # 20
# 右移运算符（>>）
# 右移运算符在运算时是将所有二进制位右移若干位
# 由 >> 右边的数指定移动的位数，高位补0，低位舍弃
# 在 Python 中右移 n 位等价于除以 pow(2, n) ，作向下取整除法
print(5 >> 2)  # 5 // (2**2) = 1

"""成员运算符"""
# 成员运算符就是判断某一对象是否在序列中，在就返回 True，否则返回 False
a = 6
b = [1, 2, 3, 4, 5, 6]
print(a in b)  # True
print(str(a) not in b)  # True

"""身份运算符"""
# 身份运算符是判断两个对象是否指向同一内存地址（is 和 is not）
# 也可以使用我们前面介绍过的 id() 函数判断对象的内存地址
a = 1
print(id(a))  # 输出 a 的内存地址
b = 1
print(id(b))  # 输出 b 的内存地址
print(a is b)  # True
print(a is not b)  # False
# 将 is 和 == 作比较
print(a is b, a == b)  # True True
# 从终端的输出结果看 is 和 == 好像一样，但其实并非如此
# == 比较的是两者的值是否相同，而 is 比较的是来两者的内存地址是否相同


"""运算符的优先级"""
print(5 + 6 * 3 - 4 / 2)  # 四则混合运算，先乘除，后加减，从左到右
print(5 ** 2 ** 3)  # 幂运算从右往左分组计算，相当于是 5**(2**3)
print(5 + 3 * -1)  # 负数的使用，相当于 5 + 3 * (-1)
print(6 * 3 ** 2 * 2)  # 先进行幂运算再计算乘法，相当于 6*(3**2)*2
print(1 << 5 - 4)  # 四则运算优先级高于位运算，相当于 1<<(5-4)
print(6 - 3 > 2 + 5)  # 四则运算优先级高于比较运算符，相当于 (6-3) > (2+5)

print(6 and 0)  # 与运算遇 0 则 0
print(0 in [0])  # 成员运算符返回 True 或 False
print(6 and 0 in [0])  # 成员运算符优先级高于逻辑运算符

"""括号的使用"""
print((4 + 4) << 2)  # 先判断是不是从左向右计算的
print(4 + (4 << 2))  # 再看看先计算左移运算，再进行加法
